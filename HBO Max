/***
 * streaming-ui-check.js
 * 增加 HBO Max 影片可用性检测的完整版本示例
 * 适用于 Quantumult-X 598+ 版本
 * @XIAO_KOP
 ***/

const BASE_URL = 'https://www.netflix.com/title/';
const BASE_URL_YTB = "https://www.youtube.com/premium";
const BASE_URL_DISNEY = 'https://www.disneyplus.com';
const BASE_URL_Dazn = "https://startup.core.indazn.com/misl/v5/Startup";
const BASE_URL_Param = "https://www.paramountplus.com/";
const BASE_URL_Discovery_token = "https://us1-prod-direct.discoveryplus.com/token?deviceId=d1a4a5d25212400d1e6985984604d740&realm=go&shortlived=true";
const BASE_URL_Discovery = "https://us1-prod-direct.discoveryplus.com/users/me";
const BASE_URL_GPT = 'https://chat.openai.com/';
const Region_URL_GPT = 'https://chat.openai.com/cdn-cgi/trace';
const BASE_URL_HBOMAX = 'https://play.hbomax.com/';

const FILM_ID = 81280792;
const policy_name = "Netflix"; // 填入你的 Netflix 策略组名
const arrow = " ➟ ";
const UA = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36';

const STATUS_COMING = 2;
const STATUS_AVAILABLE = 1;
const STATUS_NOT_AVAILABLE = 0;
const STATUS_TIMEOUT = -1;
const STATUS_ERROR = -2;

const flags = new Map([
  ["US", "美国"],
  ["CA", "加拿大"],
  ["GB", "英国"],
  ["AU", "澳大利亚"],
  ["JP", "日本"],
  ["KR", "韩国"],
  ["IN", "印度"],
  ["SG", "新加坡"],
  ["MY", "马来西亚"],
  ["PH", "菲律宾"],
  ["TH", "泰国"],
  ["VN", "越南"],
  ["ID", "印度尼西亚"],
  ["TW", "台湾"],
  ["HK", "香港"],
  ["MO", "澳门"]
]);

let result = {
  "title": ' 流媒体服务查询',
  "YouTube": 'YouTube: 检测失败，请重试 ❗️',
  "Netflix": 'Netflix: 检测失败，请重试 ❗️',
  "Dazn": "Dazn: 检测失败，请重试 ❗️",
  "Disney": "Disneyᐩ: 检测失败，请重试 ❗️",
  "Paramount": "Paramountᐩ: 检测失败，请重试 ❗️",
  "Discovery": "Discoveryᐩ: 检测失败，请重试 ❗️",
  "ChatGPT": "ChatGPT: 检测失败，请重试 ❗️",
  "HBO Max": "HBO Max: 检测失败，请重试 ❗️"
};

const message = {
  action: "get_policy_state",
  content: $environment.params
};

async function fetchWithTimeout(url, timeout = 10000) {
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);
  try {
    const res = await fetch(url, { signal: controller.signal });
    clearTimeout(id);
    return res;
  } catch (e) {
    clearTimeout(id);
    throw e;
  }
}

async function checkHbomax() {
  try {
    const res = await fetchWithTimeout(BASE_URL_HBOMAX);
    if (!res.ok) return { status: STATUS_NOT_AVAILABLE, detail: `HTTP ${res.status}` };
    const text = await res.text();
    if (text.includes('Sign In') || text.includes('Watch HBO Max')) {
      return { status: STATUS_AVAILABLE, detail: '访问正常' };
    } else if (text.match(/not available|sorry|error/i)) {
      return { status: STATUS_NOT_AVAILABLE, detail: '地区限制或无法访问' };
    } else {
      return { status: STATUS_AVAILABLE, detail: '访问正常（未知详情）' };
    }
  } catch (e) {
    if (e.name === 'AbortError') return { status: STATUS_TIMEOUT, detail: '请求超时' };
    return { status: STATUS_ERROR, detail: e.message };
  }
}

async function main() {
  const hbomaxRes = await checkHbomax();
  result["HBO Max"] = `${hbomaxRes.status === STATUS_AVAILABLE ? 'HBO Max: 支持' : 'HBO Max: 不支持'} ${arrow} ${hbomaxRes.detail}`;

  console.log(result["HBO Max"]);
}

main();
